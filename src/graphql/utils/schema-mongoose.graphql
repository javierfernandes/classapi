schema {
  query: RootQuery
}

type Command implements Node {
  type: String
  trackingId: String
  status: CommandStatusEnum
  data: String
  dataReceivedAt: Date
  executedAt: Date
  expiredAt: Date
  dependsOn(after: String, first: Int, before: String, last: Int): CommandDependsOnConnection
  payload: Generic
  error: String
  _id: ID
  updatedAt: Date
  createdAt: Date

  # The ID of an object
  id: ID!
}

# A connection to a list of items.
type CommandConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [CommandEdge]
  count: Float
}

# A connection to a list of items.
type CommandDependsOnConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [CommandDependsOnEdge]
  count: Float
}

# An edge in a connection.
type CommandDependsOnEdge {
  # The item at the end of the edge
  node: Command

  # A cursor for use in pagination
  cursor: String!
}

# An edge in a connection.
type CommandEdge {
  # The item at the end of the edge
  node: Command

  # A cursor for use in pagination
  cursor: String!
}

enum CommandStatusEnum {
  WAITING
  RESOLVED
  EXECUTED
  EXPIRED
  ERROR
}

type DataPointAlert implements Node {
  deviceNesId: String
  segmentNesId: String
  transformerNesId: String
  phase: DataPointAlertPhaseEnum
  dataPointId: DeviceDatapoint
  dataPointTypeName: String
  value: Float
  intervalEndTime: Date
  createdAt: Date
  bounds: DataPointAlertBounds
  _id: ID

  # The ID of an object
  id: ID!
}

type DataPointAlertBounds {
  upper: Float
  lower: Float
}

# A connection to a list of items.
type DataPointAlertConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [DataPointAlertEdge]
  count: Float
}

# An edge in a connection.
type DataPointAlertEdge {
  # The item at the end of the edge
  node: DataPointAlert

  # A cursor for use in pagination
  cursor: String!
}

enum DataPointAlertPhaseEnum {
  L1
  L2
  L3
}

scalar Date

type Device implements Node {
  nesId: String
  gatewayNesId: String
  name: String
  serialNumber: String
  installationDateTime: Date
  hardwareVersion: String
  softwareVersion: String
  healthPoint: DeviceHealthPointEnum
  healthPointSource: DeviceHealthPointSourceEnum
  phaseTypeID: String
  isSubstationMeter: Boolean
  _id: ID

  # The ID of an object
  id: ID!
}

# A connection to a list of items.
type DeviceConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [DeviceEdge]
  count: Float
}

type DeviceDatapoint implements Node {
  deviceNesId: String
  segmentNesId: String
  transformerNesId: String
  datapointTypeCode: String
  datapointTypeName: String
  value: Float
  start: Date
  end: Date
  interval: Float
  isDerived: Boolean
  alerts: [DeviceDatapointAlerts]
  _id: ID
  updatedAt: Date
  createdAt: Date

  # The ID of an object
  id: ID!
}

type DeviceDatapointAlerts {
  createdAt: Date
  bounds: DeviceDatapointAlertsBounds
  _id: ID
}

type DeviceDatapointAlertsBounds {
  upper: Float
  lower: Float
}

# A connection to a list of items.
type DeviceDatapointConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [DeviceDatapointEdge]
  count: Float
}

# An edge in a connection.
type DeviceDatapointEdge {
  # The item at the end of the edge
  node: DeviceDatapoint

  # A cursor for use in pagination
  cursor: String!
}

# An edge in a connection.
type DeviceEdge {
  # The item at the end of the edge
  node: Device

  # A cursor for use in pagination
  cursor: String!
}

enum DeviceHealthPointEnum {
  set
  unset
}

enum DeviceHealthPointSourceEnum {
  manual
  automatic
}

type DeviceScore implements Node {
  nesDeviceId: String
  serialNumber: String
  createdAt: Date
  value: Float
  components: DeviceScoreComponents
  _id: ID

  # The ID of an object
  id: ID!
}

type DeviceScoreComponents {
  pqs: Float
  sqs: Float
  tfhs: Float
  afhs: Float
}

# A connection to a list of items.
type DeviceScoreConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [DeviceScoreEdge]
  count: Float
}

# An edge in a connection.
type DeviceScoreEdge {
  # The item at the end of the edge
  node: DeviceScore

  # A cursor for use in pagination
  cursor: String!
}

type DeviceStats implements Node {
  nesDeviceId: String
  receivedAt: Date
  statusTypeId: String
  successfulAttempts: Float
  failedAttempts: Float
  agentSwitches: Float
  skipCount: Float
  failureHistory: [DeviceStatsFailureHistory]
  agentLog: [DeviceStatsAgentLog]
  _id: ID

  # The ID of an object
  id: ID!
}

type DeviceStatsAgentLog {
  nextClearDateTime: Date
  _id: Generic
  typeId: String
  nesId: String
  neuronId: String
  serialNumber: String
  primarySignalQuality: DeviceStatsAgentLogPrimarySignalQuality
  secondarySignalQuality: DeviceStatsAgentLogSecondarySignalQuality
  failureHistory: [DeviceStatsAgentLogFailureHistory]
}

type DeviceStatsAgentLogFailureHistory {
  intervalDuration: Float
  _id: Generic
  dateTime: Date
  failureStatusTypeId: String
}

type DeviceStatsAgentLogPrimarySignalQuality {
  carrierMargin: Float
  receivesSignalsStrength: Float
}

type DeviceStatsAgentLogSecondarySignalQuality {
  carrierMargin: Float
  receivesSignalsStrength: Float
}

type DeviceStatsFailureHistory {
  intervalDuration: Float
  _id: Generic
  dateTime: Date
  failureStatusTypeId: String
}

type Event implements Node {
  eventDefinitionId: String
  eventHistoryId: String
  dateTime: Date
  eventTypeId: String
  entityTypeId: String
  entityId: String
  entityName: String
  entitySerialNumber: String
  gateway: EventGateway
  eventDetail: Generic
  _id: ID

  # The ID of an object
  id: ID!
}

# A connection to a list of items.
type EventConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [EventEdge]
  count: Float
}

# An edge in a connection.
type EventEdge {
  # The item at the end of the edge
  node: Event

  # A cursor for use in pagination
  cursor: String!
}

type EventGateway {
  id: String
  serialNumber: String
  name: String
}

scalar Generic

type HealthPoint implements Node {
  deviceNesId: String
  healthPointState: HealthPointHealthPointStateEnum
  changedTimestamp: Date
  healthPointSource: HealthPointHealthPointSourceEnum
  _id: ID

  # The ID of an object
  id: ID!
}

# A connection to a list of items.
type HealthPointConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [HealthPointEdge]
  count: Float
}

# An edge in a connection.
type HealthPointEdge {
  # The item at the end of the edge
  node: HealthPoint

  # A cursor for use in pagination
  cursor: String!
}

enum HealthPointHealthPointSourceEnum {
  manual
  automatic
}

enum HealthPointHealthPointStateEnum {
  set
  unset
}

type Job implements Node {
  type: String
  status: JobStatusEnum
  commands(after: String, first: Int, before: String, last: Int): JobCommandsConnection
  nrOfCommands: Float
  nrOfCompletedCommands: Float
  completedAt: Date
  payload: Generic
  error: String
  _id: ID
  updatedAt: Date
  createdAt: Date

  # The ID of an object
  id: ID!
}

# A connection to a list of items.
type JobCommandsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [JobCommandsEdge]
  count: Float
}

# An edge in a connection.
type JobCommandsEdge {
  # The item at the end of the edge
  node: Command

  # A cursor for use in pagination
  cursor: String!
}

# A connection to a list of items.
type JobConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [JobEdge]
  count: Float
}

# An edge in a connection.
type JobEdge {
  # The item at the end of the edge
  node: Job

  # A cursor for use in pagination
  cursor: String!
}

enum JobStatusEnum {
  WAITING
  COMPLETED
  ERROR
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

enum orderByCommand {
  TYPE_ASC
  TYPE_DESC
  DATA_ASC
  DATA_DESC
  DATARECEIVEDAT_ASC
  DATARECEIVEDAT_DESC
  EXECUTEDAT_ASC
  EXECUTEDAT_DESC
  EXPIREDAT_ASC
  EXPIREDAT_DESC
  PAYLOAD_ASC
  PAYLOAD_DESC
  ERROR_ASC
  ERROR_DESC
  _ID_ASC
  _ID_DESC
  UPDATEDAT_ASC
  UPDATEDAT_DESC
  CREATEDAT_ASC
  CREATEDAT_DESC
}

enum orderByDataPointAlert {
  DEVICENESID_ASC
  DEVICENESID_DESC
  SEGMENTNESID_ASC
  SEGMENTNESID_DESC
  TRANSFORMERNESID_ASC
  TRANSFORMERNESID_DESC
  DATAPOINTTYPENAME_ASC
  DATAPOINTTYPENAME_DESC
  VALUE_ASC
  VALUE_DESC
  INTERVALENDTIME_ASC
  INTERVALENDTIME_DESC
  CREATEDAT_ASC
  CREATEDAT_DESC
  _ID_ASC
  _ID_DESC
}

enum orderByDevice {
  NESID_ASC
  NESID_DESC
  GATEWAYNESID_ASC
  GATEWAYNESID_DESC
  NAME_ASC
  NAME_DESC
  SERIALNUMBER_ASC
  SERIALNUMBER_DESC
  INSTALLATIONDATETIME_ASC
  INSTALLATIONDATETIME_DESC
  HARDWAREVERSION_ASC
  HARDWAREVERSION_DESC
  SOFTWAREVERSION_ASC
  SOFTWAREVERSION_DESC
  PHASETYPEID_ASC
  PHASETYPEID_DESC
  ISSUBSTATIONMETER_ASC
  ISSUBSTATIONMETER_DESC
  _ID_ASC
  _ID_DESC
}

enum orderByDeviceDatapoint {
  DEVICENESID_ASC
  DEVICENESID_DESC
  SEGMENTNESID_ASC
  SEGMENTNESID_DESC
  TRANSFORMERNESID_ASC
  TRANSFORMERNESID_DESC
  DATAPOINTTYPECODE_ASC
  DATAPOINTTYPECODE_DESC
  DATAPOINTTYPENAME_ASC
  DATAPOINTTYPENAME_DESC
  VALUE_ASC
  VALUE_DESC
  START_ASC
  START_DESC
  END_ASC
  END_DESC
  INTERVAL_ASC
  INTERVAL_DESC
  ISDERIVED_ASC
  ISDERIVED_DESC
  _ID_ASC
  _ID_DESC
  UPDATEDAT_ASC
  UPDATEDAT_DESC
  CREATEDAT_ASC
  CREATEDAT_DESC
}

enum orderByDeviceScore {
  NESDEVICEID_ASC
  NESDEVICEID_DESC
  SERIALNUMBER_ASC
  SERIALNUMBER_DESC
  CREATEDAT_ASC
  CREATEDAT_DESC
  VALUE_ASC
  VALUE_DESC
  _ID_ASC
  _ID_DESC
}

enum orderByDeviceStats {
  NESDEVICEID_ASC
  NESDEVICEID_DESC
  RECEIVEDAT_ASC
  RECEIVEDAT_DESC
  STATUSTYPEID_ASC
  STATUSTYPEID_DESC
  SUCCESSFULATTEMPTS_ASC
  SUCCESSFULATTEMPTS_DESC
  FAILEDATTEMPTS_ASC
  FAILEDATTEMPTS_DESC
  AGENTSWITCHES_ASC
  AGENTSWITCHES_DESC
  SKIPCOUNT_ASC
  SKIPCOUNT_DESC
  _ID_ASC
  _ID_DESC
}

enum orderByEvent {
  EVENTDEFINITIONID_ASC
  EVENTDEFINITIONID_DESC
  EVENTHISTORYID_ASC
  EVENTHISTORYID_DESC
  DATETIME_ASC
  DATETIME_DESC
  EVENTTYPEID_ASC
  EVENTTYPEID_DESC
  ENTITYTYPEID_ASC
  ENTITYTYPEID_DESC
  ENTITYID_ASC
  ENTITYID_DESC
  ENTITYNAME_ASC
  ENTITYNAME_DESC
  ENTITYSERIALNUMBER_ASC
  ENTITYSERIALNUMBER_DESC
  EVENTDETAIL_ASC
  EVENTDETAIL_DESC
  _ID_ASC
  _ID_DESC
}

enum orderByHealthPoint {
  CHANGEDTIMESTAMP_ASC
  CHANGEDTIMESTAMP_DESC
  _ID_ASC
  _ID_DESC
}

enum orderByJob {
  TYPE_ASC
  TYPE_DESC
  NROFCOMMANDS_ASC
  NROFCOMMANDS_DESC
  NROFCOMPLETEDCOMMANDS_ASC
  NROFCOMPLETEDCOMMANDS_DESC
  COMPLETEDAT_ASC
  COMPLETEDAT_DESC
  PAYLOAD_ASC
  PAYLOAD_DESC
  ERROR_ASC
  ERROR_DESC
  _ID_ASC
  _ID_DESC
  UPDATEDAT_ASC
  UPDATEDAT_DESC
  CREATEDAT_ASC
  CREATEDAT_DESC
}

enum orderBySegment {
  NESID_ASC
  NESID_DESC
  HANDLE_ASC
  HANDLE_DESC
  PARENT_ASC
  PARENT_DESC
  DISTANCE_ASC
  DISTANCE_DESC
  VARIANCE_ASC
  VARIANCE_DESC
  CROSSPHASEADJUSTMENT_ASC
  CROSSPHASEADJUSTMENT_DESC
  _ID_ASC
  _ID_DESC
  UPDATEDAT_ASC
  UPDATEDAT_DESC
  CREATEDAT_ASC
  CREATEDAT_DESC
}

enum orderBySegmentMetric {
  SEGMENTNESID_ASC
  SEGMENTNESID_DESC
  SEGMENTPARENTNESID_ASC
  SEGMENTPARENTNESID_DESC
  TRANSFORMERNESID_ASC
  TRANSFORMERNESID_DESC
  VALUE_ASC
  VALUE_DESC
  _ID_ASC
  _ID_DESC
}

enum orderByTopology {
  NESID_ASC
  NESID_DESC
  CREATEDAT_ASC
  CREATEDAT_DESC
  _ID_ASC
  _ID_DESC
}

enum orderByTransformer {
  NAME_ASC
  NAME_DESC
  NESID_ASC
  NESID_DESC
  SEGMENTS_ASC
  SEGMENTS_DESC
  HEALTHPOINTS_ASC
  HEALTHPOINTS_DESC
  METERS_ASC
  METERS_DESC
  ISFAVORITE_ASC
  ISFAVORITE_DESC
  TIMEZONE_ASC
  TIMEZONE_DESC
  LASTCOMMUNICATION_ASC
  LASTCOMMUNICATION_DESC
  _ID_ASC
  _ID_DESC
}

enum orderByTransformerMetric {
  TRANSFORMERNESID_ASC
  TRANSFORMERNESID_DESC
  VALUE_ASC
  VALUE_DESC
  _ID_ASC
  _ID_DESC
}

enum orderByUser {
  CREATED_AT_ASC
  CREATED_AT_DESC
  NAME_ASC
  NAME_DESC
  PASSWORD_ASC
  PASSWORD_DESC
  _ID_ASC
  _ID_DESC
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type RootQuery {
  user(id: ID!): User
  users(
    # The ID of a User
    id: [ID]

    # The ID of a User
    ids: [ID]
    orderBy: orderByUser
    created_at: Date
    name: String
    password: String
    _id: ID
  ): [User]
  event(id: ID!): Event
  events(
    # The ID of a Event
    id: [ID]

    # The ID of a Event
    ids: [ID]
    orderBy: orderByEvent
    eventDefinitionId: String
    eventHistoryId: String
    dateTime: Date
    eventTypeId: String
    entityTypeId: String
    entityId: String
    entityName: String
    entitySerialNumber: String
    eventDetail: Generic
    _id: ID
  ): [Event]
  healthpoint(id: ID!): HealthPoint
  healthpoints(
    # The ID of a HealthPoint
    id: [ID]

    # The ID of a HealthPoint
    ids: [ID]
    orderBy: orderByHealthPoint
    deviceNesId: String
    changedTimestamp: Date
    _id: ID
  ): [HealthPoint]
  segment(id: ID!): Segment
  segments(
    # The ID of a Segment
    id: [ID]

    # The ID of a Segment
    ids: [ID]
    orderBy: orderBySegment
    nesId: String
    handle: Float
    parent: Float
    distance: Float
    variance: Float
    crossPhaseAdjustment: Float
    gatewayNesId: String
    _id: ID
    updatedAt: Date
    createdAt: Date
  ): [Segment]
  topology(id: ID!): Topology
  topologies(
    # The ID of a Topology
    id: [ID]

    # The ID of a Topology
    ids: [ID]
    orderBy: orderByTopology
    nesId: String
    createdAt: Date
    _id: ID
  ): [Topology]
  transformer(id: ID!): Transformer
  transformers(
    # The ID of a Transformer
    id: [ID]

    # The ID of a Transformer
    ids: [ID]
    orderBy: orderByTransformer
    name: String
    nesId: String
    segments: Float
    healthPoints: Float
    meters: Float
    isFavorite: Boolean
    timeZone: String
    lastCommunication: Date
    _id: ID
  ): [Transformer]
  device(id: ID!): Device
  devices(
    # The ID of a Device
    id: [ID]

    # The ID of a Device
    ids: [ID]
    orderBy: orderByDevice
    nesId: String
    gatewayNesId: String
    name: String
    serialNumber: String
    installationDateTime: Date
    hardwareVersion: String
    softwareVersion: String
    phaseTypeID: String
    isSubstationMeter: Boolean
    _id: ID
  ): [Device]
  devicedatapoint(id: ID!): DeviceDatapoint
  devicedatapoints(
    # The ID of a DeviceDatapoint
    id: [ID]

    # The ID of a DeviceDatapoint
    ids: [ID]
    orderBy: orderByDeviceDatapoint
    deviceNesId: String
    segmentNesId: String
    transformerNesId: String
    datapointTypeCode: String
    datapointTypeName: String
    value: Float
    start: Date
    end: Date
    interval: Float
    isDerived: Boolean
    _id: ID
    updatedAt: Date
    createdAt: Date
  ): [DeviceDatapoint]
  segmentmetric(id: ID!): SegmentMetric
  segmentmetrics(
    # The ID of a SegmentMetric
    id: [ID]

    # The ID of a SegmentMetric
    ids: [ID]
    orderBy: orderBySegmentMetric
    segmentNesId: String
    segmentParentNesId: String
    transformerNesId: String
    value: Float
    _id: ID
  ): [SegmentMetric]
  datapointalert(id: ID!): DataPointAlert
  datapointalerts(
    # The ID of a DataPointAlert
    id: [ID]

    # The ID of a DataPointAlert
    ids: [ID]
    orderBy: orderByDataPointAlert
    deviceNesId: String
    segmentNesId: String
    transformerNesId: String
    dataPointTypeName: String
    value: Float
    intervalEndTime: Date
    createdAt: Date
    _id: ID
  ): [DataPointAlert]
  command(id: ID!): Command
  commands(
    # The ID of a Command
    id: [ID]

    # The ID of a Command
    ids: [ID]
    orderBy: orderByCommand
    type: String
    trackingId: String
    data: String
    dataReceivedAt: Date
    executedAt: Date
    expiredAt: Date
    payload: Generic
    error: String
    _id: ID
    updatedAt: Date
    createdAt: Date
  ): [Command]
  job(id: ID!): Job
  jobs(
    # The ID of a Job
    id: [ID]

    # The ID of a Job
    ids: [ID]
    orderBy: orderByJob
    type: String
    nrOfCommands: Float
    nrOfCompletedCommands: Float
    completedAt: Date
    payload: Generic
    error: String
    _id: ID
    updatedAt: Date
    createdAt: Date
  ): [Job]
  devicestats(
    # The ID of a DeviceStats
    id: [ID]

    # The ID of a DeviceStats
    ids: [ID]
    orderBy: orderByDeviceStats
    nesDeviceId: String
    receivedAt: Date
    statusTypeId: String
    successfulAttempts: Float
    failedAttempts: Float
    agentSwitches: Float
    skipCount: Float
    _id: ID
  ): [DeviceStats]
  devicescore(id: ID!): DeviceScore
  devicescores(
    # The ID of a DeviceScore
    id: [ID]

    # The ID of a DeviceScore
    ids: [ID]
    orderBy: orderByDeviceScore
    nesDeviceId: String
    serialNumber: String
    createdAt: Date
    value: Float
    _id: ID
  ): [DeviceScore]
  transformermetric(id: ID!): TransformerMetric
  transformermetrics(
    # The ID of a TransformerMetric
    id: [ID]

    # The ID of a TransformerMetric
    ids: [ID]
    orderBy: orderByTransformerMetric
    transformerNesId: String
    value: Float
    _id: ID
  ): [TransformerMetric]
  viewer: Viewer

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
}

type Segment implements Node {
  nesId: String
  handle: Float
  parent: Float
  distance: Float
  variance: Float
  crossPhaseAdjustment: Float
  gatewayNesId: String
  devices: [SegmentDevices]
  children(after: String, first: Int, before: String, last: Int): SegmentChildrenConnection
  _id: ID
  updatedAt: Date
  createdAt: Date

  # The ID of an object
  id: ID!
}

# A connection to a list of items.
type SegmentChildrenConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [SegmentChildrenEdge]
  count: Float
}

# An edge in a connection.
type SegmentChildrenEdge {
  # The item at the end of the edge
  node: Segment

  # A cursor for use in pagination
  cursor: String!
}

# A connection to a list of items.
type SegmentConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [SegmentEdge]
  count: Float
}

type SegmentDevices {
  _id: Generic
  nesId: String
  signalStrengthDiscrepancy: Float
  primary: Boolean
  serialNumber: String
}

# An edge in a connection.
type SegmentEdge {
  # The item at the end of the edge
  node: Segment

  # A cursor for use in pagination
  cursor: String!
}

type SegmentMetric implements Node {
  segmentNesId: String
  segmentParentNesId: String
  transformerNesId: String
  metric: SegmentMetricMetric
  value: Float
  interval: SegmentMetricInterval
  _id: ID

  # The ID of an object
  id: ID!
}

# A connection to a list of items.
type SegmentMetricConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [SegmentMetricEdge]
  count: Float
}

# An edge in a connection.
type SegmentMetricEdge {
  # The item at the end of the edge
  node: SegmentMetric

  # A cursor for use in pagination
  cursor: String!
}

type SegmentMetricInterval {
  start: Date
  end: Date
  duration: Float
}

type SegmentMetricMetric {
  nesName: String
  phase: SegmentMetricMetricPhaseEnum
}

enum SegmentMetricMetricPhaseEnum {
  L1
  L2
  L3
}

type Topology implements Node {
  nesId: String
  transformerId: Transformer
  createdAt: Date
  rootSegment: Segment
  _id: ID

  # The ID of an object
  id: ID!
}

# A connection to a list of items.
type TopologyConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [TopologyEdge]
  count: Float
}

# An edge in a connection.
type TopologyEdge {
  # The item at the end of the edge
  node: Topology

  # A cursor for use in pagination
  cursor: String!
}

type Transformer implements Node {
  name: String
  nesId: String
  segments: Float
  healthPoints: Float
  meters: Float
  isFavorite: Boolean
  timeZone: String
  lastCommunication: Date
  _id: ID

  # The ID of an object
  id: ID!
}

# A connection to a list of items.
type TransformerConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [TransformerEdge]
  count: Float
}

# An edge in a connection.
type TransformerEdge {
  # The item at the end of the edge
  node: Transformer

  # A cursor for use in pagination
  cursor: String!
}

type TransformerMetric implements Node {
  transformerNesId: String
  metric: TransformerMetricMetric
  value: Float
  interval: TransformerMetricInterval
  _id: ID

  # The ID of an object
  id: ID!
}

# A connection to a list of items.
type TransformerMetricConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [TransformerMetricEdge]
  count: Float
}

# An edge in a connection.
type TransformerMetricEdge {
  # The item at the end of the edge
  node: TransformerMetric

  # A cursor for use in pagination
  cursor: String!
}

type TransformerMetricInterval {
  start: Date
  end: Date
  duration: Float
}

type TransformerMetricMetric {
  nesName: String
  phase: TransformerMetricMetricPhaseEnum
}

enum TransformerMetricMetricPhaseEnum {
  L1
  L2
  L3
}

type User implements Node {
  created_at: Date
  name: String
  password: String
  roles: [String]
  _id: ID

  # The ID of an object
  id: ID!
}

# A connection to a list of items.
type UserConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [UserEdge]
  count: Float
}

# An edge in a connection.
type UserEdge {
  # The item at the end of the edge
  node: User

  # A cursor for use in pagination
  cursor: String!
}

type Viewer implements Node {
  # The ID of an object
  id: ID!
  users(after: String, first: Int, before: String, last: Int, orderBy: orderByUser, created_at: Date, name: String, password: String, _id: ID): UserConnection
  user(id: ID!): User
  events(after: String, first: Int, before: String, last: Int, orderBy: orderByEvent, eventDefinitionId: String, eventHistoryId: String, dateTime: Date, eventTypeId: String, entityTypeId: String, entityId: String, entityName: String, entitySerialNumber: String, eventDetail: Generic, _id: ID): EventConnection
  event(id: ID!): Event
  healthpoints(after: String, first: Int, before: String, last: Int, orderBy: orderByHealthPoint, deviceNesId: String, changedTimestamp: Date, _id: ID): HealthPointConnection
  healthpoint(id: ID!): HealthPoint
  segments(after: String, first: Int, before: String, last: Int, orderBy: orderBySegment, nesId: String, handle: Float, parent: Float, distance: Float, variance: Float, crossPhaseAdjustment: Float, gatewayNesId: String, _id: ID, updatedAt: Date, createdAt: Date): SegmentConnection
  segment(id: ID!): Segment
  topologies(after: String, first: Int, before: String, last: Int, orderBy: orderByTopology, nesId: String, createdAt: Date, _id: ID): TopologyConnection
  topology(id: ID!): Topology
  transformers(after: String, first: Int, before: String, last: Int, orderBy: orderByTransformer, name: String, nesId: String, segments: Float, healthPoints: Float, meters: Float, isFavorite: Boolean, timeZone: String, lastCommunication: Date, _id: ID): TransformerConnection
  transformer(id: ID!): Transformer
  devices(after: String, first: Int, before: String, last: Int, orderBy: orderByDevice, nesId: String, gatewayNesId: String, name: String, serialNumber: String, installationDateTime: Date, hardwareVersion: String, softwareVersion: String, phaseTypeID: String, isSubstationMeter: Boolean, _id: ID): DeviceConnection
  device(id: ID!): Device
  devicedatapoints(after: String, first: Int, before: String, last: Int, orderBy: orderByDeviceDatapoint, deviceNesId: String, segmentNesId: String, transformerNesId: String, datapointTypeCode: String, datapointTypeName: String, value: Float, start: Date, end: Date, interval: Float, isDerived: Boolean, _id: ID, updatedAt: Date, createdAt: Date): DeviceDatapointConnection
  devicedatapoint(id: ID!): DeviceDatapoint
  segmentmetrics(after: String, first: Int, before: String, last: Int, orderBy: orderBySegmentMetric, segmentNesId: String, segmentParentNesId: String, transformerNesId: String, value: Float, _id: ID): SegmentMetricConnection
  segmentmetric(id: ID!): SegmentMetric
  datapointalerts(after: String, first: Int, before: String, last: Int, orderBy: orderByDataPointAlert, deviceNesId: String, segmentNesId: String, transformerNesId: String, dataPointTypeName: String, value: Float, intervalEndTime: Date, createdAt: Date, _id: ID): DataPointAlertConnection
  datapointalert(id: ID!): DataPointAlert
  commands(after: String, first: Int, before: String, last: Int, orderBy: orderByCommand, type: String, trackingId: String, data: String, dataReceivedAt: Date, executedAt: Date, expiredAt: Date, payload: Generic, error: String, _id: ID, updatedAt: Date, createdAt: Date): CommandConnection
  command(id: ID!): Command
  jobs(after: String, first: Int, before: String, last: Int, orderBy: orderByJob, type: String, nrOfCommands: Float, nrOfCompletedCommands: Float, completedAt: Date, payload: Generic, error: String, _id: ID, updatedAt: Date, createdAt: Date): JobConnection
  job(id: ID!): Job
  devicestats(id: ID!): DeviceStats
  devicescores(after: String, first: Int, before: String, last: Int, orderBy: orderByDeviceScore, nesDeviceId: String, serialNumber: String, createdAt: Date, value: Float, _id: ID): DeviceScoreConnection
  devicescore(id: ID!): DeviceScore
  transformermetrics(after: String, first: Int, before: String, last: Int, orderBy: orderByTransformerMetric, transformerNesId: String, value: Float, _id: ID): TransformerMetricConnection
  transformermetric(id: ID!): TransformerMetric
}
